## 
# format.py
# 
# CLI tool for parsing a .bib file and imputing missing reference names.
# For example, 
# 
#     @article{,
#         author = {Bar},
#         year = {2021}
#     }
# 
# becomes
# 
#     @article{Bar2021,
#     }
# 
# Note, this requires each reference to at least have an author and year.
# 
# Arguments:
#     input file
#     output file
#
# @author Tycho Atsma <tycho.atsm@gmail.com>
##

# Dependencies
import re
import sys

# Collection of regex patterns for matching aspects of bib reference
author = r'author\s=\s{(\w+)'
prop = r'(\w+)\s=\s{(.+)},'
start = r'@\w+{'
meta = r'@(\w+){(.*),'
end = r'}'

def references(bibfile):
    """
    Function for parsing a .bib file into a list of references, where each
    reference is a dictionary containing the reference's properties as keys.

    Parameters:
        bibfile: Path to .bib file

    Returns:
        list
    """
    with open(bibfile, 'r') as f:

        # Collection of references and the current reference
        references = []
        current = {}

        for line in f.read().split('\n'):

            # Start a new reference
            if re.search(start, line):

                # Start a new reference
                current = {}

                # Get the reference name
                ref = re.findall(meta, line)
                current['type'] = ref[0][0]
                current['name'] = ref[0][1] if len(ref[0]) else None

            # End a reference
            elif re.match(end, line):

                # Add the current ref the collection
                references.append(current)

            # Update the current reference
            else:
                props = re.findall(prop, line)

                # Skip empty properties
                if not len(props):
                    continue
                
                # Update the current entry
                props = props[0]
                current[props[0]] = props[1].strip()

        # Expose the references
        return references

def impute(collection):
    """
    Function for imputing the names of reference names of a
    collection of references.

    Parameters:
        collection: List of references as generated by references()

    Returns:
        list
    """
    # Dont modify the given collection
    imputed = list(collection)
    for ref in imputed:

        # Skip entries that already have a name or don't have an author
        if ref['name'] or not 'author' in ref:
            continue

        # Get the author and year
        author = ref['author'].split(' ')[0]
        year = ref['year'] if 'year' in ref else ''

        # Set a new name based on the author and year
        ref['name'] = f"{author}{year}"

    # Expose the imputed collection
    return imputed

def to_bib(collection):
    """
    Function to convert a collection of references to a .bib formatted string.

    Parameters:
        collection: List of references as generated by references().

    Returns:
        string
    """
    # Prepare output
    out = ''
    for ref in collection:

        # Set the start of a reference
        out += '@%s{%s,\n' % (ref['type'], ref['name'])

        # And add all properties
        for key in ref.keys():

            # Except the type and name, which are already in the start
            if key in ['type', 'name']:
                continue

            # Add the property
            out += '\t%s = {%s}\n' % (key, ref[key])

        # And end the reference
        out += '}\n'

    # Expose the output
    return out

# Run as main
if __name__ == '__main__':

    # Get the cli arguments
    input_file = sys.argv[1]
    output_file = sys.argv[2]

    # Write to the output file
    with open(output_file, 'w') as f:
        f.write(to_bib(impute(references(input_file))))
